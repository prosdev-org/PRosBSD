include cfg/Makefile.header

VERSION_H := include/generated/version.h
VERSION_STRING := $(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_PATCH)$(VERSION_SUFFIX)
BADGE_VERSION := $(shell echo $(VERSION_STRING) | sed 's/-/--/g')

.PHONY: all clean boot version.h kernel image hdd_image

all: clean hdd_image

kernel: version.h
	$(MAKE) -C kernel/

image: kernel
	@dd if=/dev/zero of=$(IMAGE_NAME) count=2880 bs=512 $(NULL)
	@mkfs.fat -F 12 $(IMAGE_NAME)
	@dd if=$(BUILD_DIRECTORY)/kernel/boot/MBR.BIN of=$(IMAGE_NAME) conv=notrunc
	@mcopy -i $(IMAGE_NAME) $(BUILD_DIRECTORY)/kernel/boot/SETUP.BIN ::/
	@mcopy -i $(IMAGE_NAME) $(BUILD_DIRECTORY)/kernel/KERNEL.BIN ::/

hdd_image:
	@if [ "$(ISGRUBQ)" = "Y" ]; then \
		$(MAKE) hdd_image_grub; \
	elif [ "$(ISGRUBQ)" = "N" ]; then \
		$(MAKE) hdd_image_syslinux; \
	else \
		echo "$(ESC_BLUE)ERROR: ISGRUBQ must be only Y or N!$(ESC_END)"; \
		exit 1; \
	fi
	@ln -s $(HDD_IMAGE) prosbsd.img

hdd_image_syslinux: image
	@dd if=/dev/zero of=$(HDD_IMAGE) bs=1M count=70 $(NULL)
	@dd if=/dev/zero of=build/1.img bs=1048576 count=33 $(NULL)
	@dd if=/dev/zero of=build/2.img bs=1048576 count=34 $(NULL)
	@parted -s $(HDD_IMAGE) mklabel msdos
	@parted -s $(HDD_IMAGE) mkpart primary 1MiB 34MiB
	@parted -s $(HDD_IMAGE) mkpart primary 35MiB 69MiB
	@parted -s $(HDD_IMAGE) set 1 boot on
	@mkfs.fat -F 32 build/1.img
	@mkfs.ext2 build/2.img
	@mcopy -i build/1.img $(MEMDISK) ::/memdisk
	@mcopy -i build/1.img $(IMAGE_NAME) ::/fd.img
	@mcopy -i build/1.img cfg/syslinux.cfg ::/syslinux.cfg
	@syslinux --install build/1.img
	@dd if=build/1.img of=$(HDD_IMAGE) bs=1M seek=1 conv=notrunc $(NULL)
	@dd if=build/2.img of=$(HDD_IMAGE) bs=1M seek=35 conv=notrunc $(NULL)
	@parted -s $(HDD_IMAGE) unit B print

hdd_image_grub: image
	@echo "$(ESC_PURPLE)Unmounting the image before continuing, you can safely ignore those errors."
	@echo "$(ESC_YELLOW)"
	@make unmount_image
	@echo "$(ESC_END)"
	@dd if=/dev/zero of=$(HDD_IMAGE) bs=1M count=70
	@parted -s $(HDD_IMAGE) mklabel msdos
	@parted -s $(HDD_IMAGE) mkpart primary 1MiB 34MiB
	@parted -s $(HDD_IMAGE) mkpart primary 35MiB 69MiB
	@max=10; \
	for i in `seq 2 $$max`; \
		do \
		if [ -e $(HDD_IMAGE) ]; \
			then break; \
		fi; \
		if [ $$i -eq $$max ]; \
			then exit 1; \
		fi; \
		sleep 0.1; \
	done;
	@LOOP_DEVICE=$$(sudo losetup --find --show $(HDD_IMAGE)); \
	LOOP_NUMBER=$$(basename $$LOOP_DEVICE | sed 's/[^0-9]//g'); \
	MAPPER=/dev/mapper/loop$$LOOP_NUMBER; \
	sudo kpartx -av $$LOOP_DEVICE; \
	max=20; \
	for i in `seq 2 $$max`; \
		do \
		if [ -e $${MAPPER}p1 ] && [ -e $${MAPPER}p2 ]; \
			then break; \
		fi; \
		if [ $$i -eq $$max ]; \
			then exit 1; \
		fi; \
		sleep 0.1; \
	done; \
	sudo mkfs.fat -F 32 $${MAPPER}p1; \
	sudo mkfs.ext2 $${MAPPER}p2; \
	sudo mcopy -i $${MAPPER}p1 $(MEMDISK) ::/; \
	sudo mcopy -i $${MAPPER}p1 $(IMAGE_NAME) ::/fd.img; \
	sudo mkdir -p $(GRUB_MOUNT); \
	sudo mount $${MAPPER}p1 $(GRUB_MOUNT); \
	sudo mkdir -p $(GRUB_MOUNT)/boot/grub/; \
	sudo cp cfg/grub.cfg $(GRUB_MOUNT)/boot/grub/grub.cfg; \
	sudo grub-install \
		--target=i386-pc \
		--boot-directory=$(GRUB_MOUNT)/boot \
		--modules="part_msdos fat" \
		--recheck \
		--force \
		$$LOOP_DEVICE;
	@make unmount_image
	@parted -s $(HDD_IMAGE) unit B print

unmount_image:
	-@LOOP_DEVICE=$$(sudo losetup -j $(HDD_IMAGE) | cut -d: -f1); \
	sudo umount $(GRUB_MOUNT); \
	sudo $(RM) $(GRUB_MOUNT); \
	sudo kpartx -d $$LOOP_DEVICE; \
	sudo losetup -d $$LOOP_DEVICE

config:
	@gcc cfg/configurator.c -o configurator $(NULL)
	@chmod +X configurator
	@./configurator

version.h:
	@mkdir -p include/generated
	@echo "// This file is automatically generated, do not touch it. To change the current version, use cfg/Makefile.header" > $(VERSION_H)
	@echo "#ifndef VERSION_H" >> $(VERSION_H)
	@echo "#define VERSION_H" >> $(VERSION_H)
	@echo "" >> $(VERSION_H)
	@echo "#define VERSION_MAJOR $(VERSION_MAJOR)" >> $(VERSION_H)
	@echo "#define VERSION_MINOR $(VERSION_MINOR)" >> $(VERSION_H)
	@echo "#define VERSION_PATCH $(VERSION_PATCH)" >> $(VERSION_H)
	@echo "#define VERSION_SUFFIX \"$(VERSION_SUFFIX)\"" >> $(VERSION_H)
	@echo "#define VERSION_STRING \"$(VERSION_STRING)\"" >> $(VERSION_H)
	@echo "" >> $(VERSION_H)
	@echo "#endif" >> $(VERSION_H)

update_badge:
	@sed -i "s|https://img.shields.io/badge/version-[^?)]*|https://img.shields.io/badge/version-$(BADGE_VERSION)-orange|" readme.md

format:
	@find . -name '*.h' -o -name '*.c' | xargs clang-format -i

clean:
	@$(RM) *.img include/generated/ configurator
	@$(RM) $(BUILD_DIRECTORY)
	@find . -type f \( -name "*.o" -o -name "*.BIN" \) -exec rm -f {} +
